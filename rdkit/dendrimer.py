import networkx as nx
import matplotlib.pyplot as plt
from rdkit import Chem
from rdkit.Chem import AllChem

class Monomer:
    def __init__(self, id, generation, attachment_points=2):
        self.id = id
        self.generation = generation
        self.attachment_points = attachment_points
        self.connections = {}  # Dictionary to store connections

def generate_dendrimer(core, generations):
    """
    Generates a dendrimer structure.

    Args:
        core: The Monomer object representing the core of the dendrimer.
        generations: The number of generations to generate.

    Returns:
        A list of Monomer objects representing the dendrimer.
    """
    dendrimer = [core]
    monomer_count = 1

    for gen in range(1, generations + 1):
        new_monomers = []
        for monomer in dendrimer:
            if monomer.generation == gen - 1:
                for i in range(monomer.attachment_points):
                    new_monomer = Monomer(monomer_count, gen)
                    monomer.connections[i] = new_monomer  # Store with attachment point
                    new_monomers.append(new_monomer)
                    monomer_count += 1
        dendrimer.extend(new_monomers)

    return dendrimer

def plot_dendrimer(dendrimer):
    """
    Plots a dendrimer structure using NetworkX and Matplotlib.

    Args:
        dendrimer: A list of Monomer objects representing the dendrimer 
                    generated by the generate_dendrimer function.
    """

    graph = nx.Graph()
    for monomer in dendrimer:
        graph.add_node(monomer.id, generation=monomer.generation)
        for connected_monomer in monomer.connections.values(): 
            graph.add_edge(monomer.id, connected_monomer.id)

    pos = nx.kamada_kawai_layout(graph, scale=1.0)  # Use kamada_kawai_layout

    node_colors = [monomer.generation for monomer in dendrimer]

    nx.draw(graph, pos, with_labels=False, node_size=100, 
            node_color=node_colors, cmap=plt.cm.viridis)
    plt.show()

def get_coordinates(dendrimer, scale=15.0):
    """
    Calculates the 2D coordinates of each monomer in the dendrimer.

    Args:
        dendrimer: A list of Monomer objects representing the dendrimer.

    Returns:
        A dictionary mapping monomer IDs to (x, y) coordinates.
    """

    graph = nx.Graph()
    for monomer in dendrimer:
        graph.add_node(monomer.id, generation=monomer.generation)
        for connected_monomer in monomer.connections.values():
            graph.add_edge(monomer.id, connected_monomer.id)

    pos = nx.kamada_kawai_layout(graph, scale=int(scale))  # Use kamada_kawai_layout
    return pos

def translate_molecule(mol, x, y, z=0.0):
    """
    Translates the center of mass of a molecule to the given coordinates.

    Args:
        mol: The RDKit molecule object.
        x: The x-coordinate.
        y: The y-coordinate.
        z: The z-coordinate (default 0.0).
    """
    # Calculate the center of mass
    center = AllChem.ComputeCentroid(mol.GetConformer())

    # Calculate the translation vector
    translation = Chem.rdGeometry.Point3D(x - center.x, y - center.y, z - center.z)

    # Apply the translation to each atom
    for atom in mol.GetAtoms():
        pos = mol.GetConformer().GetAtomPosition(atom.GetIdx())
        new_pos = pos + translation
        mol.GetConformer().SetAtomPosition(atom.GetIdx(), new_pos)

# Example usage
core = Monomer(0, 0)
dendrimer = generate_dendrimer(core, 3)  # Generate a dendrimer with 3 generations

# Get the coordinates for each monomer
coordinates = get_coordinates(dendrimer)

# Example: Place smiles molecules at dendrimer coordinates
smiles_list = ["c1ccccc1"] * len(dendrimer) # Example SMILES strings

# Create a list to store the molecules
molecules = []
for i, smiles in enumerate(smiles_list):
    mol = Chem.MolFromSmiles(smiles)
    if mol:
        AllChem.EmbedMolecule(mol) # Generate 3D coordinates
        x, y = coordinates[i]  # Get coordinates for the i-th monomer
        translate_molecule(mol, x, y) 
        molecules.append(mol)
    else:
        print(f"Invalid SMILES string: {smiles}")

# Combine the molecules recursively
combined_mol = molecules[0]
for mol in molecules[1:]:
    combined_mol = Chem.CombineMols(combined_mol, mol)

# Now you can do something with the combined molecule, e.g., save it
print(Chem.MolToXYZBlock(combined_mol))

# You can still plot the dendrimer if needed:
#plot_dendrimer(dendrimer)
